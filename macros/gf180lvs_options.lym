<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Set Options (Restart required!)</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>gf180lvs&gt;end("gf180mcu LVS").end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text># Copyright 2022 SkyWater PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

 module MyMacro
 
  include RBA


  #####################################################################################
  # Loading options
  #####################################################################################
  mw = RBA::MainWindow::instance

  # create a toolbar gf180lvs
  mw.menu.insert_menu("gf180lvs.end", "kl_menu", "KLayout LVS Options")
  mw.menu.insert_menu("gf180lvs.end", "mag_menu", "Magic LVS Options")

  #####################################################################################
  # Adding Klayout LVS options
  #####################################################################################
  
  #1 Adding substrate name
  run_action = RBA::Action::new
  run_action.title = "Substrate name"
  run_action.on_triggered do
    sub_name = RBA::InputDialog::ask_string("Substrate name", "Please enter substrate name", "GND")
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if sub_name 
        if text.include?("$lvs_sub")
          new_contents = text.gsub(/\$lvs_sub = \".*\"/, '$lvs_sub = "'+ sub_name + '"')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/(\# \%.*lvs)/m, '$lvs_sub = "'+ sub_name +'"' +"\n"+'\1')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
    #system( "klayout -r #{File.expand_path File.dirname(__FILE__)}/sky130.lvs -rd input=#{RBA::CellView::active.filename}" )
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "SUB_name", run_action)
  
  #2 Setting run mode
  run_mode_action = RBA::Action::new
  run_mode_action.title = "Run mode"
  run_mode_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      run_mode_select = RBA::InputDialog::ask_item("Run mode", "Select run mode:", [ "tiling", "deep", "flat" ], 1)
      if run_mode_select 
        if text.include?("$run_mode")
          new_contents = text.gsub(/\$run_mode = \".*\"/, '$run_mode = "'+ run_mode_select + '"')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/(\# \%.*lvs)/m, '$run_mode = "'+ run_mode_select +'"' +"\n"+'\1')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "run_mode", run_mode_action)
  
  #3 Setting spice net names
  spice_net_action = RBA::Action::new
  spice_net_action.title = "SPICE net name"
  spice_net_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$spice_net_names = \"true\"")
      spice_net_action.checked=(true)
    else
      spice_net_action.checked=(false)
    end
  }
  spice_net_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if spice_net_action.is_checked?
        spice_net_bool = "true"
      else
        spice_net_bool = "false"
      end
      if text.include?("$spice_net_names")
        new_contents = text.gsub(/\$spice_net_names = \".*\"/, '$spice_net_names = "'+ spice_net_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$spice_net_names = "'+ spice_net_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "SPICE_net_name", spice_net_action)
  
  #4 Setting spice comments
  spice_comment_action = RBA::Action::new
  spice_comment_action.title = "SPICE comments"
  spice_comment_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$spice_comments = \"true\"")
      spice_comment_action.checked=(true)
    else
      spice_comment_action.checked=(false)
    end
  }
  spice_comment_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if spice_comment_action.is_checked?
        spice_comment_bool = "true"
      else
        spice_comment_bool = "false"
      end
      if text.include?("$spice_comments")
        new_contents = text.gsub(/\$spice_comments = \".*\"/, '$spice_comments = "'+ spice_comment_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$spice_comments = "'+ spice_comment_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "SPICE_comments", spice_comment_action)
  
  #5 Setting scaling
  scale_action = RBA::Action::new
  scale_action.title = "Scaling x10^6"
  scale_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$scale = \"true\"")
      scale_action.checked=(true)
    else
      scale_action.checked=(false)
    end
  }
  scale_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if scale_action.is_checked?
        scale_bool = "true"
      else
        scale_bool = "false"
      end
      if text.include?("$scale")
        new_contents = text.gsub(/\$scale = \".*\"/, '$scale = "'+ scale_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$scale = "'+ scale_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "scale", scale_action)
  
  #6 Setting verbose mode
  verbose_action = RBA::Action::new
  verbose_action.title = "Verbose mode"
  verbose_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$verbose = \"true\"")
      verbose_action.checked=(true)
    else
      verbose_action.checked=(false)
    end
  }
  verbose_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if verbose_action.is_checked?
        verbose_bool = "true"
      else
        verbose_bool = "false"
      end
      if text.include?("$verbose")
        new_contents = text.gsub(/\$verbose = \".*\"/, '$verbose = "'+ verbose_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$verbose = "'+ verbose_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "verbose", verbose_action)
  
  #7 Setting schematic simplification
  schematic_simple_action = RBA::Action::new
  schematic_simple_action.title = "Schematic simplify"
  schematic_simple_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$schematic_simplify = \"true\"")
      schematic_simple_action.checked=(true)
    else
      schematic_simple_action.checked=(false)
    end
  }
  schematic_simple_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if schematic_simple_action.is_checked?
        schematic_simple_bool = "true"
      else
        schematic_simple_bool = "false"
      end
      if text.include?("$schematic_simplify")
        new_contents = text.gsub(/\$schematic_simplify = \".*\"/, '$schematic_simplify = "'+ schematic_simple_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$schematic_simplify = "'+ schematic_simple_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "schematic_simple", schematic_simple_action)
  
  #8 Setting netlist only
  net_only_action = RBA::Action::new
  net_only_action.title = "Netlist only"
  net_only_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$net_only = \"true\"")
      net_only_action.checked=(true)
    else
      net_only_action.checked=(false)
    end
  }
  net_only_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if net_only_action.is_checked?
        net_only_bool = "true"
      else
        net_only_bool = "false"
      end
      if text.include?("$net_only")
        new_contents = text.gsub(/\$net_only = \".*\"/, '$net_only = "'+ net_only_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$net_only = "'+ net_only_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "net_only", net_only_action)
  
  #9 Setting top level pins
  top_lvl_pins_action = RBA::Action::new
  top_lvl_pins_action.title = "Top level pins"
  top_lvl_pins_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$top_lvl_pins = \"true\"")
      top_lvl_pins_action.checked=(true)
    else
      top_lvl_pins_action.checked=(false)
    end
  }
  top_lvl_pins_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if top_lvl_pins_action.is_checked?
        top_lvl_pins_bool = "true"
      else
        top_lvl_pins_bool = "false"
      end
      if text.include?("$top_lvl_pins")
        new_contents = text.gsub(/\$top_lvl_pins = \".*\"/, '$top_lvl_pins = "'+ top_lvl_pins_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$top_lvl_pins = "'+ top_lvl_pins_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "top_lvl_pins", top_lvl_pins_action)
  
  #10 Setting device combine
  combine_action = RBA::Action::new
  combine_action.title = "Devices combine"
  combine_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$combine = \"true\"")
      combine_action.checked=(true)
    else
      combine_action.checked=(false)
    end
  }
  combine_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if combine_action.is_checked?
        combine_bool = "true"
      else
        combine_bool = "false"
      end
      if text.include?("$combine")
        new_contents = text.gsub(/\$combine = \".*\"/, '$combine = "'+ combine_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$combine = "'+ combine_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "combine", combine_action)
  
  #11 Setting purge
  purge_action = RBA::Action::new
  purge_action.title = "Purge"
  purge_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$purge = \"true\"")
      purge_action.checked=(true)
    else
      purge_action.checked=(false)
    end
  }
  purge_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if purge_action.is_checked?
        purge_bool = "true"
      else
        purge_bool = "false"
      end
      if text.include?("$purge")
        new_contents = text.gsub(/\$purge = \".*\"/, '$purge = "'+ purge_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$purge = "'+ purge_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "purge", purge_action)
  
  #12 Setting purge nets
  purge_nets_action = RBA::Action::new
  purge_nets_action.title = "Purge nets"
  purge_nets_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
    text = File.read(f)
    if text.include?("$purge_nets = \"true\"")
      purge_nets_action.checked=(true)
    else
      purge_nets_action.checked=(false)
    end
  }
  purge_nets_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if purge_nets_action.is_checked?
        purge_nets_bool = "true"
      else
        purge_nets_bool = "false"
      end
      if text.include?("$purge_nets")
        new_contents = text.gsub(/\$purge_nets = \".*\"/, '$purge_nets = "'+ purge_nets_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$purge_nets = "'+ purge_nets_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "purge_nets", purge_nets_action)

  #13 Setting metal top
  met_top_action = RBA::Action::new
  met_top_action.title = "Metal top"
  met_top_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      met_top_select = RBA::InputDialog::ask_item("Metal top", "Select metal top:", [ "6K", "9K", "11K", "30K" ], 1)
      if met_top_select 
        if text.include?("$metal_top")
          new_contents = text.gsub(/\$metal_top = \".*\"/, '$metal_top = "'+ met_top_select + '"')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/(\# \%.*lvs)/m, '$metal_top = "'+ met_top_select +'"' +"\n"+'\1')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "met_top", met_top_action)

  #14 Setting metal level
  met_level_action = RBA::Action::new
  met_level_action.title = "Metal level"
  met_level_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      met_level_select = RBA::InputDialog::ask_item("Metal level", "Select metal level:", [ "3LM", "4LM", "5LM", "6LM" ], 2)
      if met_level_select 
        if text.include?("$metal_level")
          new_contents = text.gsub(/\$metal_level = \".*\"/, '$metal_level = "'+ met_level_select + '"')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/(\# \%.*lvs)/m, '$metal_level = "'+ met_level_select +'"' +"\n"+'\1')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "met_level", met_level_action)

  #15 Setting MIM option
  mim_op_action = RBA::Action::new
  mim_op_action.title = "MIM option"
  mim_op_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      mim_op_select = RBA::InputDialog::ask_item("MIM option", "Select MIM option:", [ "A", "B" ], 1)
      if mim_op_select 
        if text.include?("$mim_option")
          new_contents = text.gsub(/\$mim_option = \".*\"/, '$mim_option = "'+ mim_op_select + '"')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/(\# \%.*lvs)/m, '$mim_option = "'+ mim_op_select +'"' +"\n"+'\1')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "mim_op", mim_op_action)

  #16 Setting MIM_CAP
  mim_cap_action = RBA::Action::new
  mim_cap_action.title = "MIM CAP"
  mim_cap_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      mim_cap_select = RBA::InputDialog::ask_item("MIM CAP", "Select MIM CAP:", [ "1", "1.5", "2" ], 2)
      if mim_cap_select 
        if text.include?("$mim_cap")
          new_contents = text.gsub(/\$mim_cap = \".*\"/, '$mim_cap = "'+ mim_cap_select + '"')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/(\# \%.*lvs)/m, '$mim_cap = "'+ mim_cap_select +'"' +"\n"+'\1')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "mim_cap", mim_cap_action)
  
  #17 Adding schematic path
  sch_action = RBA::Action::new
  sch_action.title = "Schematic path"
  sch_action.on_triggered do
    sch_path = RBA::InputDialog::ask_string("Schematic path", "Please enter schematic path", "lvs_temp.cdl")
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if sch_path 
        if text.include?("$schematic")
          new_contents = text.gsub(/\$schematic = \".*\"/, '$schematic = "'+ sch_path + '"')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/(\# \%.*lvs)/m, '$schematic = "'+ sch_path +'"' +"\n"+'\1')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("gf180lvs.kl_menu.end", "schematic", sch_action)
  
  #####################################################################################
  # Adding Magic LVS options
  #####################################################################################
  
  #1 Setting Combine devices
  mag_combine_action = RBA::Action::new
  mag_combine_action.title = "Combine devices"
  mag_combine_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
    text = File.read(f)
    if text.include?("combine = \"-M \"")
      mag_combine_action.checked=(true)
    else
      mag_combine_action.checked=(false)
    end
  }
  mag_combine_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if mag_combine_action.is_checked?
        mag_combine_bool = "-M "
      else
        mag_combine_bool = ""
      end
      new_contents = text.gsub(/combine = \".*\"/, 'combine = "'+ mag_combine_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("gf180lvs.mag_menu.end", "mag_combine", mag_combine_action)
  
  #2 Setting Distribute area and perimeter
  mag_distrib_action = RBA::Action::new
  mag_distrib_action.title = "Distribute area and perimeter"
  mag_distrib_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
    text = File.read(f)
    if text.include?("distrib = \"-d \"")
      mag_distrib_action.checked=(true)
    else
      mag_distrib_action.checked=(false)
    end
  }
  mag_distrib_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if mag_distrib_action.is_checked?
        mag_distrib_bool = "-d "
      else
        mag_distrib_bool = ""
      end
      new_contents = text.gsub(/distrib = \".*\"/, 'distrib = "'+ mag_distrib_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("gf180lvs.mag_menu.end", "mag_distrib", mag_distrib_action)
  
  #3 Setting Less attributes
  mag_no_attr_action = RBA::Action::new
  mag_no_attr_action.title = "Less attributes"
  mag_no_attr_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
    text = File.read(f)
    if text.include?("no_attr = \"-B \"")
      mag_no_attr_action.checked=(true)
    else
      mag_no_attr_action.checked=(false)
    end
  }
  mag_no_attr_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if mag_no_attr_action.is_checked?
        mag_no_attr_bool = "-B "
      else
        mag_no_attr_bool = ""
      end
      new_contents = text.gsub(/no_attr = \".*\"/, 'no_attr = "'+ mag_no_attr_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("gf180lvs.mag_menu.end", "mag_no_attr", mag_no_attr_action)
  
  #4 Setting Purge nets
  mag_purge_action = RBA::Action::new
  mag_purge_action.title = "Purge nets"
  mag_purge_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
    text = File.read(f)
    if text.include?("purge = \"-F \"")
      mag_purge_action.checked=(true)
    else
      mag_purge_action.checked=(false)
    end
  }
  mag_purge_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if mag_purge_action.is_checked?
        mag_purge_bool = "-F "
      else
        mag_purge_bool = ""
      end
      new_contents = text.gsub(/purge = \".*\"/, 'purge = "'+ mag_purge_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("gf180lvs.mag_menu.end", "mag_purge", mag_purge_action)


  #5.1 Setting Trimmed characters - #
  mag_trim_hash_action = RBA::Action::new
  mag_trim_hash_action.title = "Trimmed characters - \#"
  mag_trim_hash_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
    text = File.read(f)
    if text.include?("trim_hash = \"-t # \"")
      mag_trim_hash_action.checked=(true)
    else
      mag_trim_hash_action.checked=(false)
    end
  }
  mag_trim_hash_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if mag_trim_hash_action.is_checked?
        mag_trim_hash_bool = "-t # "
      else
        mag_trim_hash_bool = ""
      end
      new_contents = text.gsub(/trim_hash = \".*\"/, 'trim_hash = "'+ mag_trim_hash_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("gf180lvs.mag_menu.end", "mag_trim_hash", mag_trim_hash_action)

  #5.2 Setting Trimmed characters - !
  mag_trim_exclam_action = RBA::Action::new
  mag_trim_exclam_action.title = "Trimmed characters - \!"
  mag_trim_exclam_action.checkable=(true)
  File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
    text = File.read(f)
    if text.include?("trim_exclam = \"-t ! \"")
      mag_trim_exclam_action.checked=(true)
    else
      mag_trim_exclam_action.checked=(false)
    end
  }
  mag_trim_exclam_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if mag_trim_exclam_action.is_checked?
        mag_trim_exclam_bool = "-t ! "
      else
        mag_trim_exclam_bool = ""
      end
      new_contents = text.gsub(/trim_exclam = \".*\"/, 'trim_exclam = "'+ mag_trim_exclam_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("gf180lvs.mag_menu.end", "mag_trim_exclam", mag_trim_exclam_action)

  #6 Setting Run mode
  mag_run_mode_action = RBA::Action::new
  mag_run_mode_action.title = "Run mode"
  mag_run_mode_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      mag_run_mode_select = RBA::InputDialog::ask_item("Run mode", "Select running mode:", [ "hier", "flat"], 1)
      if mag_run_mode_select
        if mag_run_mode_select == "hier"
          new_contents = text.gsub(/mode = \".*\"/, 'mode = "-J '+ mag_run_mode_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/mode = \".*\"/, 'mode = "-J '+ mag_run_mode_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("gf180lvs.mag_menu.end", "mag_run_mode", mag_run_mode_action)

  #7 Adding Xschem netlist path
  mag_xschem_action = RBA::Action::new
  mag_xschem_action.title = "Xschem netlist path"
  mag_xschem_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/gf180lvs_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      mag_xschem = RBA::InputDialog::ask_string("Xschem netlist path", "Please enter xschem netlist path", "~/.xschem/simulations")
      if mag_xschem
        new_contents = text.gsub(/simpath = \".*\"/, 'simpath = "'+ mag_xschem +'"')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("gf180lvs.mag_menu.end", "mag_xschem", mag_xschem_action)

  #####################################################################################

end


</text>
</klayout-macro>
